import asyncio
import telegram
import time
import random
import logging
from telegram.ext import JobQueue
from typing import Final
from telegram import Update
from telegram.ext import (
    filters,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
)


BOT_TOKEN: Final = "6327851474:AAF324IcPVpEoETBkwrNxubZ4w_8jo9sYdk"
DEV_IDS = "1392123839"
BOT_USERNAME = "@dolorPriceYeganeBot"

logging.basicConfig(
    format="%(levelname)s - (%(asctime)s) - %(message)s - (Line: %(lineno)d) - [%(filename)s]",
    filename="log.txt",
    filemode="w",
    datefmt="%H:%M:%S",
    encoding="utf-8",
    level=logging.INFO,
)

logger = logging.getLogger(__name__)


# /start --> command handler
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("user %s started the bot", update.effective_user.id)
    # print(f"user {update.effective_user.id} started the bot ...")
    await context.bot.send_message(
        chat_id=update.effective_message.id,
        text="Hello to you",
        reply_to_message_id=update.effective_message.id,
    )


# /help --> command handler
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("user %s used /help command", update.effective_user.id)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="""You can use the bot in the following manner mobina \n:
     /start -> start
     /dice -> bot sends you a text based on the number of the dice
     /help -> This text""",
        reply_to_message_id=update.effective_message.id,
    )


# /dice
async def dice_handler(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    logger.info("user %s wants bot to send a dice", update.effective_user.id)
    message = await conetext.bot.send_dice(
        chat_id=update.effective_chat.id,
        reply_to_message_id=update.effective_message.id,
    )
    print(message.dice.value)


# /repeat <text> --> command handler
async def repeat_handler(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    # print(conetext.args)
    # print(update.effective_message.text)
    # context args are: ['salam', 'chetori']
    if len(conetext.args) == 0:
        return
    text = " ".join(conetext.args)
    await conetext.bot.send_message(chat_id=update.effective_chat.id, text=text)


# error handler
async def error_handler(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    logger.info("error %s occured in %s", conetext.error, update)
    text = f"error {conetext.error} occured in {update}"
    for dev_id in DEV_IDS:
        await conetext.bot.send_message(
            chat_id=dev_id,
            text=text,
        )


# echo message handler
async def echo(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    logger.info(
        "user %s wants bot to repeat %s",
        update.effective_user.id,
        update.effective_message.text,
    )
    await conetext.bot.send_message(
        chat_id=update.effective_chat.id,
        text=update.effective_message.text,
        reply_to_message_id=update.effective_message.id,
    )


# echo sticker handler
async def echo_sticker(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    logger.info(
        "user %s wants bot to repeat %s",
        update.effective_user.id,
        update.effective_message.sticker,
    )
    await conetext.bot.send_sticker(
        chat_id=update.effective_chat.id,
        text=update.effective_message.sticker,
        reply_to_message_id=update.effective_message.id,
    )


def generate_response(text: str) -> str:
    parsed_text = text.lower().strip()
    if "hello" in parsed_text:
        return "Hello to you"
    if "how are you" in parsed_text:
        return "I'm good how about you?"
    if "good" in parsed_text:
        return "Good to hear that"

    return "Sorry, I didn't understand you!"


# chatbot handler
async def chat_handler(update: Update, conetext: ContextTypes.DEFAULT_TYPE):
    answer_message = generate_response(update.effective_message.text)
    if BOT_USERNAME not in update.effective_message.text:
        return
    logger.info("user %s wants to have a chat with the bot", update.effective_user.id)
    await conetext.bot.send_message(
        chat_id=update.effective_chat.id,
        text=answer_message + "\n" + update.effective_user.first_name,
        reply_markup=update.effective_message.id,
    )


if __name__ == "__main__":
    logger.info("building bot ...")
    bot = ApplicationBuilder().token(BOT_TOKEN).build()
    # Add Command Handlers
    bot.add_handler(CommandHandler("start", start_handler))
    bot.add_handler(CommandHandler("help", help_handler))
    bot.add_handler(CommandHandler("dice", dice_handler))
    bot.add_handler(CommandHandler("repeat", repeat_handler))
    # Add Message Handlers
    bot.add_handler(MessageHandler(filters.TEXT | filters.Dice, echo))
    bot.add_handler(MessageHandler(filters.Sticker.ALL, echo_sticker))
    bot.add_handler(MessageHandler(filters.TEXT, chat_handler))
    # Add Error Handlers
    bot.add_error_handler(error_handler)
    # start Bot
    logger.info("start polling ...")
    bot.run_polling()
